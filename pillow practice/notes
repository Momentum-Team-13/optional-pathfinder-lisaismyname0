practice exercises based off of:

https://automatetheboringstuff.com/chapter17/#calibre_link-136

>>> from PIL import Image
>>> cat_pic= Image.open("cat.png")
>>> cat_pic.size
(400, 533)
>>> cat_pic.filename
'cat.png'
>>> width, height = cat_pic.size
>>> width
400
>>> height
533
>>> cat_pic.format
'JPEG'
>>> cat_pic.format_description
'JPEG (ISO 10918)'
>>> cat_pic.save("cat.png")
>>> from PIL import Image
>>> im = Image.new("RGBA", (100,200), "purple")
>>> im.save("purpleImage.png"
... )
>>> im2 = Image.new("RGBA", (20,20))
>>> im2.save("transparentImage.png")
>>> faceIm = cat_pic.crop((150, 160, 250, 260))
>>> faceIm.size
(100, 100)
>>> catPicCopy = cat_pic.copy()
>>> catPicCopy.paste(faceIm, (0,0))
>>> catPicCopy.paste(faceIm, (400,500))
>>> catPicCopy.save("pasted.png")
>>> catPicCopy.paste(faceIm, (120,130))
>>> catPicCopy.save("pasted.png")
>>> picWidth, picHeight = cat_pic.size
>>> faceWidth, faceHeight = faceIm.size
>>> catCopyTwo=cat_pic.copy()
>>> for left in range(0, picWidth, faceWidth):
...     for top in range(0, picHeight, faceHeight):
...             print(left,top)
...             catCopyTwo.paste(faceIm, (left,top))
...
0 0
0 100
0 200
0 300
0 400
0 500
100 0
100 100
100 200
100 300
100 400
100 500
200 0
200 100
200 200
200 300
200 400
200 500
300 0
300 100
300 200
300 300
300 400
300 500
>>> catCopyTwo.save("tiled.png")
>>>

Points
The point(xy, fill) method draws individual pixels. The xy argument represents a list of the points you want to draw. The list can be a list of x- and y-coordinate tuples, such as [(x, y), (x, y), ...], or a list of x- and y-coordinates without tuples, such as [x1, y1, x2, y2, ...]. The fill argument is the color of the points and is either an RGBA tuple or a string of a color name, such as 'red'. The fill argument is optional.

Lines
The line(xy, fill, width) method draws a line or series of lines. xy is either a list of tuples, such as [(x, y), (x, y), ...], or a list of integers, such as [x1, y1, x2, y2, ...]. Each point is one of the connecting points on the lines youâ€™re drawing. The optional fill argument is the color of the lines, as an RGBA tuple or color name. The optional width argument is the width of the lines and defaults to 1 if left unspecified.

THIS CREATED THE IMAGE.PNG:
>>> from PIL import Image, ImageDraw
>>> im = Image.new("RGBA", (200,200), "white")
>>> draw = ImageDraw.Draw(im)
>>> draw.line([(0, 0), (199, 0), (199, 199), (0, 199), (0, 0)], fill='black')
>>> for i in range(100,200,10):
...     draw.line([(i, 0),(200, i -100)], fill="green")
...
>>> im.save("drawing.png")
>>>

https://towardsdatascience.com/creating-beautiful-topography-maps-with-python-efced5507aa3
^helpful notes on creating color map

https://www.earthinversion.com/utilities/pygmt-high-resolution-topographic-map-in-python/

- each list is 25 x 20 500 values